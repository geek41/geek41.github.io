#+STARTUP:showall
#+TITLE:title
#+DATE:date
#+AUTHOR:Sylvan.Li
#+EMAIL:sylvan9527@gmail.com
#+STYLE:<link ref="stylesheet" type="text/css" href="../stylesheet/worg.css">
#+OPTIONS: ^:{}

#+BEGIN_HTML
---
layout: default
title: 理解class.forName()
---
#+END_HTML

    使用jdbc方式连接数据库时会使用一句代码Class.forName(String
    className).这句话是什么意思呢？首先说一点Class.forName(String
    className)这个方法的作用是装载className这个字符串指定的类。


* 官方文档

  返回与带有给定字符串名的类或接口相关联的 Class 对象。调用此方法等效于：

  Class.forName(className, true, currentLoader)

  其中 currentLoader 表示此类的定义类加载器。

  例如，以下代码片段返回 java.lang.Thread 类的运行时 Class 描述符。


  Class t = Class.forName("java.lang.Thread")

  调用 forName("X") 将导致名为 X 的类被初始化。


  参数：

  className - 所需类的完全限定名。

  返回：

  具有指定名的类的 Class 对象。

  通俗的说就是：获得字符串参数中指定的类，并初始化该类


* 类装载

  类装载就是把一个类或是一个接口的字节码文件，通过解析该字节码来构建代
  表这个类或是这个接口的实例的过程。 这个字节码文件来源可能是压缩包、
  网络、运行时编译出的或者自动生成的class文件，jvm spec没有规定必须从
  什么地方加载。

  类装载的两种方式：

  1.Class c1 = Class.forName ("java.lang.String"); 

  2.ClassLoader cl = new  ClassLoader(); 

  Class cl.loadClass( String name, boolean resolve );


* 两种装载方法的区别：

   - 不同的类装载器

     Class.forName是从指定的classloader中装载类,如果没有指定,也就是一
     个参数的时候,是从装载当前对象实例所在的classloader中装载类。

     而ClassLoader的实例调用loadclass方法,是指从当前ClassLoader实例中
     调用类,而这个实例与装载当前所在类实例的Classloader也许不是同一个. 

     说白了就是他们实现装载的时候，使用的类装载器的指定是不同的。那为
     什么使用不同的ClassLoader来装载类呢？

     其实使用多个classloader加载类的情况非常常见,比如说我们的app
     server都是这样的. 在Web与EJB间, 他们的classLoader就是不同的,这样
     做的目的就是为了避免两者间类装载的相互干扰。



   - 是否实例化类

     Class的装载分了三个阶段，loading（装载），linking（连接）和
     initializing（实例化）分别定义在The Java Language Specification的
     12.2，12.3和12.4。

     Class.forName(className)实际上是调用Class.forName(className,
     true, this.getClass().getClassLoader())。注意第二个参数，是指
     Class被loading后是不是必须被初始化。
     
     ClassLoader.loadClass(className)实际上调用的是
     ClassLoader.loadClass(name, false)，第二个参数指出Class是否被link。

     区别就出来了。Class.forName(className)装载的class已经被实例化，而
     ClassLoader.loadClass(className)装载的class还没有被link，所以就更
     谈不上实例化了。

     一般情况下，这两个方法效果一样，都能装载Class。但如果程序需要
     Class被实例化，就必须用Class.forName(name)了。

     例如，在JDBC中加载mysql的驱动类时（关于注册jdbc驱动请参看另外一篇
     文章，jdbc注册驱动的三种方式），
     Class.forName("com.mysql.jdbc.Driver")，如果换成
     getClass().getClassLoader().loadClass("com.mysql.jdbc.Driver")，
     就不行，因为它只是向jvm装载了Driver并没有实例化，就不能执行响应的
     操作。

     打开com.mysql.jdbc.Driver的源代码看看，

#+BEGIN_SRC java

        //

        // Register ourselves with the DriverManager

        //

        static {

            try {

                java.sql.DriverManager.registerDriver(new Driver());

            } catch (SQLException E) {

                throw new RuntimeException("Can't register driver!");

            }

        }

#+END_SRC

     可以看到，Driver在static块中会注册自己到java.sql.DriverManager。
     而static块就是在Class的初始化中被执行。所以这个地方就只能用
     Class.forName(className)。

* 参考资料

    1.http://www.iteye.com/topic/15039 

    2.Class.forName和ClassLoader.loadClass的比较

    http://blog.csdn.net/lu7kang/article/details/5576043 

    3.自定义ClassLoader 

    http://software.ccidnet.com/pub/disp/Article?columnID=294&articleID=25857&pageNO=1 

    4.ClassLoader分析 

    http://blog.csdn.net/longdick/article/details/1873795 

    5.转自:
    http://blog.csdn.net/yanwushu/article/details/7574713
