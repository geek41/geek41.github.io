---
layout: view_simple
title: Jekyll折腾笔记
excerpt: 
keywords: ""
categories: [Jekyll]
tags: [jekyll,github pages]
---


<p>
记录折腾Jekyll静态博客到github的一些心路历程，空闲的时间会持续更新
</p>


<div id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#sec-1">1 Official documents</a>
<ul>
<li><a href="#sec-1-1">1.1 Working with drafts</a></li>
<li><a href="#sec-1-2">1.2 Writing posts</a>
<ul>
<li><a href="#sec-1-2-1">1.2.1 The Posts Folder</a></li>
<li><a href="#sec-1-2-2">1.2.2 Creating Post Files</a></li>
<li><a href="#sec-1-2-3">1.2.3 Including images and resources</a></li>
<li><a href="#sec-1-2-4">1.2.4 Displaying an index of posts</a></li>
<li><a href="#sec-1-2-5">1.2.5 Post excerpts</a></li>
<li><a href="#sec-1-2-6">1.2.6 Highlighting code snippets</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>

<div id="outline-container-1" class="outline-2">
<h2 id="sec-1">Official documents</h2>
<div class="outline-text-2" id="text-1">


<p>
  截取一些官方的文档以便折腾的时候查阅，以为官网每次要加载googleapis.com的内容，国内又访问不了，所以加载时间比较慢，所以放在这里。
</p>

</div>

<div id="outline-container-1-1" class="outline-3">
<h3 id="sec-1-1">Working with drafts</h3>
<div class="outline-text-3" id="text-1-1">


<p>
  Drafts are posts without a date. They’re posts you’re still working on and don’t want to publish yet. To get up and running with drafts, create a <sub>drafts</sub> folder in your site’s root (as described in the site structure section) and create your first draft:
</p>




<pre class="example">
|-- _drafts/
|   |-- a-draft-post.md

</pre>


<p>
To preview your site with drafts, simply run jekyll serve or jekyll build with the &ndash;drafts switch. Each will be assigned the value modification time of the draft file for its date, and thus you will see currently edited drafts as the latest posts.
</p>
<p>
上面是官网对于drafts的解释，但是github貌似不支持，不会加载drafts中的文档，想用drafts只能选择折中的方法。
</p>
</div>

</div>

<div id="outline-container-1-2" class="outline-3">
<h3 id="sec-1-2">Writing posts</h3>
<div class="outline-text-3" id="text-1-2">


<p>
One of Jekyll’s best aspects is that it is “blog aware”. What does this mean, exactly? Well, simply put, it means that blogging is baked into Jekyll’s functionality. If you write articles and publish them online, this means that you can publish and maintain a blog simply by managing a folder of text-files on your computer. Compared to the hassle of configuring and maintaining databases and web-based CMS systems, this will be a welcome change!
</p>

</div>

<div id="outline-container-1-2-1" class="outline-4">
<h4 id="sec-1-2-1">The Posts Folder</h4>
<div class="outline-text-4" id="text-1-2-1">


<p>
​As explained on the directory structure page, the <sub>posts</sub> folder is where your blog posts will live. These files can be either Markdown or Textile formatted text files, and as long as they have YAML Front Matter, they will be converted from their source format into an HTML page that is part of your static site.
</p>
</div>

</div>

<div id="outline-container-1-2-2" class="outline-4">
<h4 id="sec-1-2-2">Creating Post Files</h4>
<div class="outline-text-4" id="text-1-2-2">


<p>
To create a new post, all you need to do is create a new file in the <sub>posts</sub> directory. How you name files in this folder is important. Jekyll requires blog post files to be named according to the following format:
</p>



<pre class="example">YEAR-MONTH-DAY-title.MARKUP
</pre>


<p>
Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. For example, the following are examples of valid post filenames:
</p>



<pre class="example">2011-12-31-new-years-eve-is-awesome.md
2012-09-12-how-to-write-a-blog.textile
</pre>


<p>
<b>ProTip™: Link to other posts</b>
</p>


<pre class="example">​ Use the post_url tag to link to other posts without having to worry about the URL's breaking when the site permalink style changes.
</pre>


<p>
-​Content Formats
</p>
<p>
All blog post files must begin with YAML Front Matter. After that, it’s simply a matter of deciding which format you prefer. Jekyll supports two popular content markup formats: Markdown and Textile. These formats each have their own way of marking up different types of content within a post, so you should familiarize yourself with these formats and decide which one best suits your needs.
</p>
<p>
-Be aware of character sets
</p>
<p>
Content processors can modify certain characters to make them look nicer. For example, the smart extension in Redcarpet converts standard, ASCII quotation characters to curly, Unicode ones. In order for the browser to display those characters properly, define the charset meta value by including &lt;meta charset="utf-8"&gt; in the &lt;head&gt; of your layout.
</p>
</div>

</div>

<div id="outline-container-1-2-3" class="outline-4">
<h4 id="sec-1-2-3">Including images and resources</h4>
<div class="outline-text-4" id="text-1-2-3">


<p>
Chances are, at some point, you’ll want to include images, downloads, or other digital assets along with your text content. While the syntax for linking to these resources differs between Markdown and Textile, the problem of working out where to store these files in your site is something everyone will face.
Because of Jekyll’s flexibility, there are many solutions to how to do this. One common solution is to create a folder in the root of the project directory called something like assets or downloads, into which any images, downloads or other resources are placed. Then, from within any post, they can be linked to using the site’s root as the path for the asset to include. Again, this will depend on the way your site’s (sub)domain and path are configured, but here some examples (in Markdown) of how you could do this using the site.url variable in a post.
Including an image asset in a post:
</p>



<pre class="example">… which is shown in the screenshot below:
![My helpful screenshot]({{ site.url }}/assets/screenshot.jpg)
</pre>


<p>
Linking to a PDF for readers to download:
</p>



<pre class="example">… you can [get the PDF]({{ site.url }}/assets/mydoc.pdf) directly.
</pre>



<p>
ProTip™: Link using just the site root URL
</p>
<p>
You can skip the {{ site.url }} variable if you know your site will only ever be displayed at the root URL of your domain. In this case you can reference assets directly with just /path/file.jpg.
</p>
</div>

</div>

<div id="outline-container-1-2-4" class="outline-4">
<h4 id="sec-1-2-4">Displaying an index of posts</h4>
<div class="outline-text-4" id="text-1-2-4">


<p>
It’s all well and good to have posts in a folder, but a blog is no use unless you have a list of posts somewhere. Creating an index of posts on another page (or in a template) is easy, thanks to the Liquid template language and its tags. Here’s a basic example of how to create a list of links to your blog posts:
</p>



<pre class="example">&lt;ul&gt;
  {% for post in site.posts %}
    &lt;li&gt;
      &lt;a href="{{ post.url }}"&gt;{{ post.title }}&lt;/a&gt;
    &lt;/li&gt;
  {% endfor %}
&lt;/ul&gt;
</pre>


<p>
Of course, you have full control over how (and where) you display your posts, and how you structure your site. You should read more about how templates work with Jekyll if you want to know more.
Note that the post variable only exists inside the for loop above. If you wish to access the currently-rendering page/posts’s variables (the variables of the post/page that has the for loop in it), use the page variable instead.
</p></div>

</div>

<div id="outline-container-1-2-5" class="outline-4">
<h4 id="sec-1-2-5">Post excerpts</h4>
<div class="outline-text-4" id="text-1-2-5">


<p>
Each post automatically takes the first block of text, from the beginning of the content to the first occurrence of excerpt<sub>separator</sub>, and sets it as the post.excerpt. Take the above example of an index of posts. Perhaps you want to include a little hint about the post’s content by adding the first paragraph of each of your posts:
</p>



<pre class="example">&lt;ul&gt;
  {% for post in site.posts %}
    &lt;li&gt;
      &lt;a href="{{ post.url }}"&gt;{{ post.title }}&lt;/a&gt;
      {{ post.excerpt }}
    &lt;/li&gt;
  {% endfor %}
&lt;/ul&gt;
</pre>


<p>
Because Jekyll grabs the first paragraph you will not need to wrap the excerpt in p tags, which is already done for you. These tags can be removed with the following if you’d prefer:
</p>



<pre class="example">{{ post.excerpt | remove: '&lt;p&gt;' | remove: '&lt;/p&gt;' }}
</pre>


<p>
If you don’t like the automatically-generated post excerpt, it can be overridden by adding excerpt to your post’s YAML Front Matter. Completely disable it by setting your excerpt<sub>separator</sub> to "".
Also, as with any output generated by Liquid tags, you can pass the | strip<sub>html</sub> flag to remove any html tags in the output. This is particularly helpful if you wish to output a post excerpt as a meta="description" tag within the post head, or anywhere else having html tags along with the content is not desirable.
</p>
</div>

</div>

<div id="outline-container-1-2-6" class="outline-4">
<h4 id="sec-1-2-6">Highlighting code snippets</h4>
<div class="outline-text-4" id="text-1-2-6">

<p>Jekyll also has built-in support for syntax highlighting of code snippets using either Pygments or Rouge, and including a code snippet in any post is easy. Just use the dedicated Liquid tag as follows:
</p>

<p>
And the output will look like this:
</p>



<pre class="example">

</pre>


<p>
<b>ProTip™: Show line numbers</b>
</p>
<p>
You can make code snippets include line-numbers by adding the word linenos to the end of the opening highlight tag like this: {% highlight ruby linenos %}.
These basics should be enough to get you started writing your first posts. When you’re ready to dig into what else is possible, you might be interested in doing things like customizing post permalinks or using custom variables in your posts and elsewhere on your site.
</p></div>
</div>
</div>
</div>
